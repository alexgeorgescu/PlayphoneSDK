//
//  MNRandom.java
//  MultiNet client
//
//  Copyright 2009 PlayPhone. All rights reserved.
//

package com.playphone.multinet.utils;

/**
 * A class representing MultiNet cross-platform random number generator
 */
public class MNRandom
 {
  /**
   * Constructs a new random number generator.
   */
  public MNRandom ()
   {
    this(System.currentTimeMillis());
   }

  /**
   * Constructs a new random number generator using user-supplied seed.
   *
   * @param seed initial seed
   */
  public MNRandom (long seed)
   {
    setSeed(seed);
   }

  /**
   * Sets new seed value.
   *
   * @param seed new seed value
   */
  public synchronized void setSeed (long seed)
   {
    this.seed = seed != 0 ? (seed & 0xFFFFFFFFL) : 1;
   }

  private synchronized int next ()
   {
    seed ^= (seed << 13) & 0xFFFFFFFFL;
    seed ^= seed >>> 17;
    seed ^= (seed << 5) & 0xFFFFFFFFL;

    return (int)(seed);
   }

  /**
   * Returns next pseudorandom int value.
   *
   * @return next pseudorandom int value
   */
  public synchronized int nextInt ()
   {
    return next() & 0x7FFFFFFF;
   }

  /**
   * Returns next pseudorandom int value in range between 0 and specified value (exclusive).
   *
   * @param n an upper bound of value to generate
   * @return next pseudorandom int value in [0..n - 1] range
   */
  public int nextInt (int n)
   {
    if (n <= 0)
     {
      throw new IllegalArgumentException("n must be positive");
     }

    if ((n & -n) == n) // n is a power of 2
     {
      return nextInt() % n;
     }

    int randomBits;
    int result;

    do
     {
      randomBits = nextInt();
      result     = randomBits % n;
     } while (randomBits - result + (n - 1) < 0);

    return result;
   }

  // === Default static generator instance ===

  /**
   * Default random number generator instance.
   */
  public static final MNRandom mn = new MNRandom();

  // === Standard C library simulation methods ===

  /**
   * Upper bound of random numbers generated by <code>rand</code> method
   */
  public static final int RAND_MAX = 0x7FFFFFFF;

  /**
   * Returns next pseudorandom int value in range between 0 and <code>RAND_MAX</code> (inclusive).
   *
   * @param n an upper bound of value to generate
   * @return next pseudorandom int value in [0..RAND_MAX] range
   */
  public int rand ()
   {
    return nextInt();
   }

  /**
   * Sets new seed value.
   *
   * @param seed new seed value
   */
  public void srand (long seed)
   {
    setSeed(seed);
   }

  // === [4.3BSD, POSIX.1-2001] stdlib.h C library simulation methods ===

  /**
   * Upper bound of random numbers generated by <code>random</code> method
   */
  public static final int RANDOM_MAX = 0x7FFFFFFF;

  /**
   * Returns next pseudorandom int value in range between 0 and <code>RANDOM_MAX</code> (inclusive).
   *
   * @param n an upper bound of value to generate
   * @return next pseudorandom int value in [0..RANDOM_MAX] range
   */
  public int random ()
   {
    return nextInt();
   }

  /**
   * Sets new seed value.
   *
   * @param seed new seed value
   */
  public void srandom (long seed)
   {
    setSeed(seed);
   }

  private long seed;
 }
